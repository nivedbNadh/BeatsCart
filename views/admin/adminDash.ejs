<%- include('../layouts/admin/adminDashNav') %>

<!-- Main Content Area -->
<div class="content">
    <!-- Dashboard Chart -->
    <div class="dashboard-graph-container">
        <canvas id="myChart"></canvas>
    </div>

    <!-- Form Section -->
    <div class="form-container">
        <div class="form-group">
            <label for="time-interval">Select Time Interval:</label>
            <select id="time-interval" class="form-select">
                <option value="daily">Daily</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
            </select>
        </div>

        <div class="form-group">
            <label for="start-date">Start Date:</label>
            <input type="date" id="start-date" class="form-control">
        </div>

        <div class="form-group">
            <label for="end-date">End Date:</label>
            <input type="date" id="end-date" class="form-control">
        </div>

        <div class="form-group">
            <label for="option-selecting">Select Option:</label>
            <select id="option-selecting" class="form-select">
                <option value="PDF">PDF</option>
                <option value="excel">Excel</option>
            </select>
        </div>

        <div class="download-button-container">
            <button class="download-btn" id="download-btn">Download</button>
        </div>
    </div>

    <!-- Table Section -->
    <div class="container">
        <h3 style="text-align: center;">Top Selling Products</h3>
        <table id="usersTable" class="table table-bordered table-hover table-responsive">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Product Name</th>
                    <th>Count</th>
                </tr>
            </thead>
            <tbody>
                <% if (topSellingProducts.length > 0) { %>
                    <% topSellingProducts.forEach((product, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= product.productName %></td>
                            <td><%= product.totalQuantity %></td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="3">No products sold yet</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <div class="container">
        <h3 style="text-align: center;">Top Selling Categories</h3>
        <table id="categoryTable" class="table table-bordered table-hover table-responsive">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Category Name</th>
                    <th>Quantity Sold</th>
                </tr>
            </thead>
            <tbody>
                <% if (topSellingCategories.length > 0) { %>
                    <% topSellingCategories.forEach((category, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= category._id %></td>
                            <td><%= category.totalQuantity %></td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="3">No categories sold yet</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <div class="container">
        <h3 style="text-align: center;">Top Selling Brands</h3>
        <table id="brandTable" class="table table-bordered table-hover table-responsive">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Brand Name</th>
                    <th>Quantity Sold</th>
                </tr>
            </thead>
            <tbody>
                <% if (topSellingBrands.length > 0) { %>
                    <% topSellingBrands.forEach((brand, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= brand.brandName %></td>
                            <td><%= brand.totalQuantity %></td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="3">No brands sold yet</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</div>


</head>
<body>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Dropdown to select the time interval -->
    <div style="text-align: center; margin: 20px;">
        <label for="timeInterval">Select Time Interval: </label>
        <select id="timeInterval">
            <option value="daily">Daily</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
        </select>
    </div>
    
    <!-- Chart container -->
    <div style="width: 860px; padding-left: 290px;  height: 450px;" >
        <canvas id="myBarChart"></canvas>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let chartInstance;
    
            const categoryData = JSON.parse('<%- categoryData %>');
            console.log('categoryData', categoryData);
    
            const validCategoryData = categoryData.filter(item =>
                typeof item === 'object' && item.date && item.category && typeof item.totalQuantity === 'number'
            );
    
            console.log('Filtered valid data:', validCategoryData);
    
            document.getElementById('timeInterval').addEventListener('change', updateChart);
    
            updateChart();
    
            function updateChart() {
                const selectedInterval = document.getElementById('timeInterval').value; 
    
                const filteredData = filterDataByTimeInterval(selectedInterval);
    
                console.log('Filtered Data:', filteredData);
    
                if (chartInstance) {
                    chartInstance.destroy();
                }
    
                const ctx = document.getElementById('myBarChart').getContext('2d');
                chartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: filteredData.labels, 
                        datasets: [{
                            label: `Most Sold Product Category for ${selectedInterval.charAt(0).toUpperCase() + selectedInterval.slice(1)}`,
                            backgroundColor: "#4edd8a",
                            borderColor: "#333",
                            data: filteredData.counts, 
                            borderWidth: 2
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                title: { display: true, text: 'Category', color: '#333', font: { size: 14 } },
                                grid: { display: false }
                            },
                            y: {
                                beginAtZero: true,
                                ticks: { color: '#333', font: { size: 12 } },
                                title: { display: true, text: 'Sales Count', color: '#333', font: { size: 14 } },
                                grid: { color: '#e9ecef' }
                            }
                        },
                        plugins: {
                            tooltip: { intersect: false, mode: 'index' },
                            legend: {
                                display: true,
                                position: 'top',
                                labels: { color: '#333', font: { size: 14 } }
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: false,
                    }
                });
            }
    
            function filterDataByTimeInterval(timeInterval) {
                const dataMap = {};
                const today = new Date();
                const currentYear = today.getFullYear();
                const currentMonth = today.getMonth() + 1;
                const currentDay = today.getDate();
    
                validCategoryData.forEach(item => {
                    const itemDate = new Date(item.date);
                    const year = itemDate.getFullYear();
                    const month = itemDate.getMonth() + 1;
                    const day = itemDate.getDate();
    
                    let periodKey;
                    if (timeInterval === 'yearly') {
                        periodKey = year; 
                    } else if (timeInterval === 'monthly' && year === currentYear) {
                        periodKey = `${year}-${month}`; 
                    } else if (timeInterval === 'daily' && year === currentYear && month === currentMonth && day === currentDay) {
                        periodKey = `${year}-${month}-${day}`; 
                    }
    
                    if (periodKey) {
                        if (!dataMap[periodKey]) {
                            dataMap[periodKey] = {};
                        }
                        if (!dataMap[periodKey][item.category]) {
                            dataMap[periodKey][item.category] = 0;
                        }
                        dataMap[periodKey][item.category] += item.totalQuantity;
                    }
                });
    
                console.log("DataMap:", dataMap);
    
                const labels = [];
                const counts = [];
                Object.keys(dataMap).forEach(periodKey => {
                    let mostSoldCategory = null;
                    let maxCount = 0;
    
                    for (const [category, count] of Object.entries(dataMap[periodKey])) {
                        if (count > maxCount) {
                            mostSoldCategory = category;
                            maxCount = count;
                        }
                    }
    
                    labels.push(mostSoldCategory); 
                    counts.push(maxCount);  
                });
    
                return { labels, counts };
            }
        });
    </script>
            
    
    
        
</body>
</html>



<!-- <style>
.dashboard-graph-container {
    text-align: center;
    margin-bottom: 30px;
}

.form-container {
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
    margin-top: -10px; 
}

.form-group {
    margin-bottom: 15px;
}

.download-section {
    display: flex;
    justify-content: space-between; 
    align-items: center; 
}

.download-section .form-group {
    flex: 1;
}

.download-button-container {
    display: flex;
    justify-content: flex-end;
}

.btn-pdf {
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
}

.btn-pdf:hover {
    background-color: #45a049;
}

.container h2 {
    text-align: center;
    margin-bottom: 20px;
}

#usersTable {
    width: 100%;
}

#usersTable th, #usersTable td {
    text-align: center;
    vertical-align: middle;
}

.btn-primary, .btn-danger {
    margin: 0 5px;
}

.download-btn {
    background-color: #28a745;
    color: white;
    margin-left: 20px; 
    height: 50px; 
    width: 120px;
}

.download-btn:hover {
    background-color: #218838;
}

@media (max-width: 768px) {
    .form-container .row > div {
        margin-bottom: 15px;
    }

    .container {
        padding: 0 15px;
    }

    #usersTable {
        font-size: 10px;
    }
}

</style>

 -->

 <style>
    table {
    width: 85%; 
    border-collapse: collapse;
    margin-bottom: 20px;
    margin-left: auto;
    margin-right: auto; 
}

.table {
    background-color: #f9f9f9;
}

.table-bordered {
    border: 1px solid #ddd;
}

.table-hover tbody tr:hover {
    background-color: #f1f1f1;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f5f5f5;
    color: #333;
}

thead {
    font-weight: bold;
}

tbody tr {
    background-color: #fff;
}

tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

td, th {
    vertical-align: middle;
}

td[colspan="3"] {
    text-align: center;
    font-style: italic;
}

.table-responsive {
    overflow-x: auto;
    margin-left: auto;
    margin-right: auto; 
}

@media (max-width: 768px) {
    .table {
        font-size: 14px;
    }
}

.download-btn {
    background-color: #007bff;
    color: white;
    padding: 10px 15px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.download-btn:hover {
    background-color: #0056b3;
}


.form-container {
    max-width: 1050px;
    margin: 20px auto; 
    padding: 34px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 
}

.form-group {
    margin-bottom: 20px; 
}

.form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 8px;
    color: #333;
}

.form-control, .form-select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    transition: border-color 0.3s;
}

.form-control:focus, .form-select:focus {
    border-color: #007bff;
    outline: none;
}

.download-button-container {
    text-align: center;
}

.download-btn {
    background-color: #28a745;
    color: white;
    padding: 12px 20px;
    font-size: 16px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.download-btn:hover {
    background-color: #218838;
}

@media (max-width: 768px) {
    .form-container {
        padding: 15px;
    }

    .form-control, .form-select {
        font-size: 14px;
    }

    .download-btn {
        padding: 10px 15px;
        font-size: 14px;
    }
}


 </style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            let chartInstance;

            const xValues = JSON.parse('<%- xValues %>');
            const yValues = JSON.parse('<%- JSON.stringify(yValues) %>');

            const dateValues = xValues.map(date => new Date(date));

            updateChart('daily');

            document.getElementById('time-interval').addEventListener('change', function () {
                updateChart(this.value);
            });

            function updateChart(timeInterval) {
                let aggregatedData = aggregateData(timeInterval);

                const timeFormat = {
                    'monthly': { unit: 'month', tooltipFormat: 'MMM YYYY' },
                    'yearly': { unit: 'year', tooltipFormat: 'YYYY' },
                    'daily': { unit: 'day', tooltipFormat: 'MMM DD, YYYY' }
                };

                const { unit, tooltipFormat } = timeFormat[timeInterval];

                const ctx = document.getElementById('myChart').getContext('2d')

                if (chartInstance) {
                    chartInstance.destroy();
                }

                chartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: aggregatedData.x,
                        datasets: [{
                            label: 'Delivered Orders',
                            fill: false,
                            lineTension: 0.3,
                            backgroundColor: "#15cda8",
                            borderColor: "#4edd8a",
                            data: aggregatedData.y,
                            borderWidth: 2,
                            pointRadius: 4,
                            pointBackgroundColor: '#4edd8a',
                            pointBorderColor: '#ffffff',
                            pointHoverRadius: 6,
                            pointHoverBackgroundColor: '#15cda8',
                            pointHoverBorderColor: '#ffffff',
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: { unit, tooltipFormat },
                                title: { display: true, text: 'Date', color: '#333', font: { size: 14 } },
                                grid: { display: false },
                            },
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    color: '#333',
                                    font: { size: 12 }
                                },
                                title: { display: true, text: 'Number of Orders', color: '#333', font: { size: 14 } },
                                grid: { color: '#e9ecef' },
                            }
                        },
                        elements: { point: { radius: 4 } },
                        plugins: {
                            tooltip: { intersect: false, mode: 'index' },
                            legend: {
                                display: true,
                                position: 'top',
                                labels: {
                                    color: '#333',
                                    font: { size: 14 }
                                }
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: true,
                    }
                });
            }

            function aggregateData(timeInterval) {
    const aggregatedX = [];
    const aggregatedY = [];
    const dataMap = {};

    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1; // month is zero based thats why 1

    dateValues.forEach((date, index) => {
        let key;
        const year = date.getFullYear();
        const month = date.getMonth() + 1; // Add 1 to get the 1-based month

        if (timeInterval === 'yearly') {
            key = year;
        } else if (timeInterval === 'monthly') {
            // Filtering  data only include  from the current year up to the current month
            if (year === currentYear && month <= currentMonth) {
                key = `${year}-${String(month).padStart(2, '0')}`;
            } else {
                return; // Skiping  data not in the current year or after the current month
            }
        } else {
            key = date.toISOString().split('T')[0];

            if (timeInterval === 'daily' && key !== today.toISOString().split('T')[0]) {
                return; // Skiping  data not from today for daily
            }
        }

        if (!dataMap[key]) {
            dataMap[key] = 0;
        }
        dataMap[key] += yValues[index];
    });

    for (const [key, value] of Object.entries(dataMap)) {
        aggregatedX.push(key);
        aggregatedY.push(value);
    }

    return { x: aggregatedX, y: aggregatedY };
}
        })
    </script>

    <script>
        document.getElementById('download-btn').addEventListener('click',async()=>{
            const startDate=document.getElementById('start-date').value
           const endDate= document.getElementById('end-date').value
           const format=document.getElementById('option-selecting').value
           console.log('format',format)

           console.log(startDate,'startDate')
           console.log(endDate,'endDate')

           if (!startDate || !endDate) {
        Toastify({
            text: 'Please select both start and end dates.',
            duration: 5000,
            close: true,
            gravity: 'top',
            position: 'center',
            backgroundColor: 'orange',
        }).showToast();
        return; 
    }



           let url = '/download-sales-report';
    if (format === 'excel') {
        url = '/download-excel-report'; 
    }

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ startDate, endDate })
    })
    .then(response => response.blob())
    .then(blob => {
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = format === 'excel' ? 'sales_report.xlsx' : 'sales_report.pdf';
        link.click();
    })
    .catch(error => console.error('Error:', error));
        })
    </script>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>

</body>

</html>
