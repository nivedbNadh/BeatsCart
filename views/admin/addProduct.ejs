<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Add Product</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }
    form {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    input[type="text"], input[type="number"], textarea {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
    input[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        float: right;
    }
    input[type="submit"]:hover {
        background-color: #45a049;
    }
    .selected-images-container {
        display: flex;
        flex-wrap: wrap;
    }
    .image-crop-container {
        width: 48%;
        margin: 1%;
        box-sizing: border-box;
    }
    .image-container {
        position: relative;
        display: inline-block;
        margin-bottom: 20px;
    }
    .image-container img {
        max-width: 100%;
        max-height: 150px;
        margin-right: 10px;
    }
    .crop-button {
        margin-top: 10px;
    }
</style>
</head>
<body>


    
<form id="addProductForm" action="/adminProduct" method="post" enctype="multipart/form-data" novalidate>
    <h2>Add Product</h2>
    
    <label for="name">Name:</label><br>
    <input type="text" id="name" name="name" required><br>
    <span class="error-message" id="name-error"></span><br>

    <label for="description">Description:</label><br>
    <textarea id="description" name="description" rows="4" required></textarea><br>
    <span class="error-message" id="description-error"></span><br>

    <label for="image">Image:</label><br>
    <input type="file" id="images" name="images" accept="image/*" multiple onchange="displaySelectedImages(this)">
    <div class="selected-images-container" id="selectedImagesContainer"></div>
    <span class="error-message" id="images-error"></span><br>

    <label for="price">Price:</label><br>
    <input type="number" id="price" name="price" min="0.01" step="0.01" required><br>
    <span class="error-message" id="price-error"></span><br>

    <select id="category" name="category" required>
        <option value="" disabled selected>Choose category</option>
        <% category.forEach(Category => { %>
            <option value="<%= Category.name %>"><%= Category.name %></option>
        <% }) %>
    </select>
    <br>
    <span class="error-message" id="category-error"></span><br>

    <br>
    <select id="brand" name="brand" required>
        <option value="" disabled selected>choose brand</option>
        <% brands.forEach(brand=>{%>
            <option value="<%=brand.name%>"><%=brand.name%></option>
       <% }) %>

    </select><br>
    <span class="error-message" id="brand-error"></span><br>

    <br><br>

    <label for="quantity">Quantity:</label><br>
    <input type="number" id="quantity" name="quantity" min="1" required><br>
    <span class="error-message" id="quantity-error"></span><br>

    <input type="submit" value="Add Product">
</form>

<div id="errorMessages"></div>

<script>
    // validation

document.addEventListener('DOMContentLoaded', function() {
    const addProductForm = document.getElementById('addProductForm');

    addProductForm.addEventListener('submit', function(event) {
        event.preventDefault();
        validateForm();
    });
});

function validateForm() {
    const form = document.getElementById('addProductForm');
    const name = form.elements['name'].value.trim();
    const description = form.elements['description'].value.trim();
    const price = form.elements['price'].value.trim();
    const quantity = form.elements['quantity'].value.trim();
    const images = form.elements['images'].files;
    const category = form.elements['category'].value;
    const brands=form.elements['brand'].value

    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach(error => error.textContent = '');

    let isValid = true;

    if (name === '') {
        displayErrorMessage('Product Name is required', 'name-error');
        isValid = false;
    }

    if (description === '') {
        displayErrorMessage('Product Description is required', 'description-error');
        isValid = false;
    }

    if (price === '' || isNaN(price) || parseFloat(price) < 0) {
        displayErrorMessage('Please enter a valid positive price', 'price-error');
        isValid = false;
    }

    if (quantity === '' || isNaN(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('Please enter a valid positive quantity', 'quantity-error');
        isValid = false;
    }

    if (!images || images.length === 0) {
        displayErrorMessage('Product Image is required', 'images-error');
        isValid = false;
    }

    if (category === '') {
        displayErrorMessage('Product Category is required', 'category-error');
        isValid = false;
    }

    if(brands===''){
        displayErrorMessage('product brand is required','brand-error')
        isValid=false
    }

    if (isValid) {
        form.submit();
    }
}

// showing error message

function displayErrorMessage(message, elementId) {
    const errorSpan = document.getElementById(elementId);
    errorSpan.textContent = message;
    errorSpan.style.color = 'red';
}



// add product image crop and preview


function displaySelectedImages(input) {
    const selectedImagesContainer = document.getElementById('selectedImagesContainer');
    selectedImagesContainer.innerHTML = ''; 

    for (let i = 0; i < input.files.length; i++) {
        const file = input.files[i];
        const reader = new FileReader();
        const cropContainer = document.createElement('div');
        cropContainer.classList.add('image-crop-container');
        cropContainer.innerHTML = `
            <div class="image-container">
                <img id="image${i}" src="" alt="Select an image to crop">
            </div>
            <button class="crop-button" id="cropButton${i}">Crop Image ${i+1}</button>
        `;
        selectedImagesContainer.appendChild(cropContainer);

        const image = cropContainer.querySelector(`#image${i}`);
        const cropButton = cropContainer.querySelector(`#cropButton${i}`);

        reader.onload = () => {
            image.src = reader.result;
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
            });

            cropButton.addEventListener('click', () => {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({
                        width: 300,
                        height: 300,
                    });
                    const croppedImageDataURL = canvas.toDataURL();
                    image.src = croppedImageDataURL;
                    const croppedImageFile = dataURLToFile(croppedImageDataURL, file.name);
                    const currentFiles = Array.from(input.files);
                    currentFiles[i] = croppedImageFile;
                    
                    const newFileList = createFileList(currentFiles);
                    input.files = newFileList;
                    cropper.destroy();
                    cropper = null;
                } else {
                    cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                    });
                }
            });
        };
        reader.readAsDataURL(file);
    }
}

function dataURLToFile(dataUrl, filename) {
    const arr = dataUrl.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }

    return new File([u8arr], filename, { type: mime });
}

function createFileList(currentList) {
  const dataTransfer = new DataTransfer();
  currentList.forEach((file) => {
    dataTransfer.items.add(file);
  });
  return dataTransfer.files;
}

</script>

</body>
</html>
